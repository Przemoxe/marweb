<?php
namespace App\Core;

use \PDO;
use \PDOException;

/**
*
*/
class Cache
{
    private $pdo = null;
    private $tableName;

    /**
     * Initialize Cache
     */
    public function __construct()
    {
        include_once $_SERVER['DOCUMENT_ROOT'] . '/wp-config.php';
        global $table_prefix;
        $this->tableName = $table_prefix . 'cache';

        $this->enableErrorReporting();
        $this->connectToPDO();
    }

    /**
     * Enable error reporting if WP_DEBUG == true
     */
    private function enableErrorReporting()
    {
        if (WP_DEBUG)
        {
            error_reporting(E_ERROR | E_PARSE | E_NOTICE);
            ini_set('display_errors', 1);
        }
    }

    /**
     * Conect with native PDO
     */
    private function connectToPDO()
    {
        try {
            $this->pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);
            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        }
        catch(PDOException $e)
        {
            echo "Cache connection failed: " . $e->getMessage();
        }
    }

    /**
     * Genertatecache key from request uri
     */
    private function generateKeyFromUrl()
    {
        $data[] = $_SERVER['HTTP_HOST'];
        $data[] = rtrim(urldecode($_SERVER['REQUEST_URI']), '/');
        $data[] = !empty($_COOKIE['display_mode']) ? $_COOKIE['display_mode'] : 'tiles';

        $key = serialize($data);
        $key = sha1($key);
        return $key;
    }

    /**
     * Store cache
     *
     * @param  Mixed  $data
     * @param  integer $expireAfter
     * @param  String  $key
     */
    public function store($data, $expireAfter = 3600, $key = null)
    {
        $createdAt = new \DateTime();
        $expireAt = new \DateTime();
        $expireAt->add(new \DateInterval('PT' . $expireAfter . 'S'));

        if ($key == null)
        {
            $key = $this->generateKeyFromUrl();
        }

        //remove cache if exists
        $this->remove($key);

        $stmt = $this->pdo->prepare("INSERT INTO " . $this->tableName . " (expire_at, created_at, cache_key, data) VALUES(:expire_at, :created_at, :cache_key, :data)");

		$stmt->bindValue(':expire_at', $expireAt->format('Y-m-d H:i:s'), PDO::PARAM_STR);
        $stmt->bindValue(':created_at', $createdAt->format('Y-m-d H:i:s'), PDO::PARAM_STR);
		$stmt->bindValue(':cache_key', $key, PDO::PARAM_STR);
		$stmt->bindValue(':data', base64_encode($data), PDO::PARAM_STR);

		$stmt->execute();
    }

    /**
     * Remove cache by key
     *
     * @param  String $key
     */
    public function remove($key)
    {
        if ($key == null)
        {
            $key = $this->generateKeyFromUrl();
        }

        $this->pdo->exec("DELETE FROM " . $this->tableName . " WHERE cache_key = '" . $key . "'");
    }

    /**
     * Remove all caches
     */
    public function removeAll()
    {
        $this->pdo->exec("TRUNCATE TABLE " . $this->tableName);
    }

    /**
     * Get cache by key or key generated by uri
     *
     * @param  String $key
     * @return Array
     */
    public function get($key = null)
    {
        if ($key == null)
        {
            $key = $this->generateKeyFromUrl();
        }


        $stmt = $this->pdo->prepare("SELECT * FROM " . $this->tableName . " WHERE cache_key = :cache_key");
        $stmt->bindValue(':cache_key', $key, PDO::PARAM_STR);
        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$this->isExpired($result))
        {
            $this->setHeaders($result);

            $result['data'] = base64_decode($result['data']);

            return $result;
        }
        else
        {

            $this->setHeadersMiss();
            return null;
        }
    }

    /**
     * Check if cache data is expired
     *
     * @param Array  $cacheData
     * @return boolean
     */
    private function isExpired($cacheData)
    {
        if(empty($cacheData)) return true;

        $expireAt = new \DateTime($cacheData['expire_at']);
        $now = new \DateTime();

        return ($expireAt < $now) ? true : false;
    }

    private function setHeadersMiss()
    {
        header('core-cache: MISS');
    }

    private function setHeaders($cacheData)
    {
        header('core-cache: HIT');
        header('core-cache-created-at: ' . $cacheData['created_at']);
        header('core-cache-expire-at: ' . $cacheData['expire_at']);
    }
}
